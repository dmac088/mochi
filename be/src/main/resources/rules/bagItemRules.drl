import io.nzbee.domain.bag.Bag;
import io.nzbee.domain.bag.BagItem;
import io.nzbee.domain.product.Product;
import io.nzbee.domain.promotion.DroolsPromotionWrapper;
import java.util.List;
import org.apache.tomcat.util.buf.StringUtils;

dialect "mvel"

function String pendingItemKey(BagItem bagItem) { 
	return bagItem.getBag().getCustomer().getCustomerID() + "-"+ bagItem.getProduct().getProductDesc();
}
//Is it out of stock?
rule "Is Out-Of Stock"
when
$bagItem : BagItem(!bagItemStatus.equals("PRO01") && !product.isInStock())
then
System.out.println("\nIs Out-Of Stock Rule");
System.out.println("************************************");
String error = "Can't process as " +  $bagItem.getProduct().getProductDesc() + " is Out-Of-Stock" ;
System.out.println(error);
$bagItem.setErrors(true);
$bagItem.setError(error);
$bagItem.getBag().logItemError(pendingItemKey($bagItem), $bagItem);
end

rule "Buy 3 get 33% off"
when 
$bagItem : BagItem(product.isInStock() && quantity >= 2)
$promotions : DroolsPromotionWrapper(promotionCodes.contains("B3G33"))
then  
System.out.println("promotion codes = " + StringUtils.join($promotions.getPromotionCodes()));
System.out.println("current quantity = " + $bagItem.getQuantity());
System.out.println("promotion = \"Buy 3 get 33% off\"");
System.out.println("total line amount = " + $bagItem.quantity * $bagItem.getProduct().getProductMarkdown());
Double discount = new Double((Math.floor($bagItem.quantity / 2) * $bagItem.getProduct().getProductMarkdown()));
System.out.println("discount amount is = " + discount);
$bagItem.addBagItemDiscount(discount * -1);
end