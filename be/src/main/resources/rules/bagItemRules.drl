import io.nzbee.domain.bag.Bag;
import io.nzbee.domain.bag.BagItem;
import io.nzbee.domain.product.Product;
import io.nzbee.domain.bag.DroolsBagItemWrapper;
import java.util.List;
import org.apache.tomcat.util.buf.StringUtils;

dialect "mvel"

function String pendingItemKey(DroolsBagItemWrapper bagItem) { 
	return bagItem.getCustomerId() + "-"+ bagItem.getProductDesc();
}
//Is it out of stock?
rule "Is Out-Of Stock"
when
$bagItem : DroolsBagItemWrapper(!bagItemStatus.equals("PRO01") && !isInStock())
then
System.out.println("\nIs Out-Of Stock Rule");
System.out.println("************************************");
String error = "Can't process " +  $bagItem.getProductDesc() + " is Out-Of-Stock" ;
System.out.println(error);
$bagItem.setErrors(true);
$bagItem.setError(error);
$bagItem.logItemError(pendingItemKey($bagItem), $bagItem.getBagItem());
end

rule "Buy 2 get 1 free"
when 
$bagItem : DroolsBagItemWrapper(isInStock() && bagItemQuantity >= 2 && promotionCodes.contains("B2G50"))
then  
System.out.println("promotion codes = " + StringUtils.join($bagItem.getPromotionCodes()));
System.out.println("current quantity = " + $bagItem.getBagItemQuantity());
System.out.println("promotion = \"Buy 2 get 50% off\"");
System.out.println("total line amount = " + $bagItem.getBagItemQuantity() * $bagItem.getMarkdownPrice());
Double discount = new Double((Math.floor($bagItem.getBagItemQuantity() / 2) * $bagItem.getMarkdownPrice()));
System.out.println("discount amount is = " + discount);
$bagItem.addBagItemDiscount(discount * -1);
end

rule "Buy 3 get 1 free"
when 
$bagItem : DroolsBagItemWrapper(isInStock() && promotionCodes.contains("B3G33") && bagItemQuantity >= 2)
then  
System.out.println("promotion codes = " + StringUtils.join($bagItem.getPromotionCodes()));
System.out.println("current quantity = " + $bagItem.getBagItemQuantity());
System.out.println("promotion = \"Buy 3 get 33% off\"");
System.out.println("total line amount = " + $bagItem.getBagItemQuantity() * $bagItem.getMarkdownPrice());
Double discount = new Double((Math.floor($bagItem.getBagItemQuantity() / 3) * $bagItem.getMarkdownPrice()));
System.out.println("discount amount is = " + discount);
$bagItem.addBagItemDiscount(discount * -1);
end

rule "Item quantity exceeds limit"
when 
$bagItem : DroolsBagItemWrapper(	!bagItemStatus.equals("PRO01")
									&& bagItemQuantity > 6)
then 
String error = "Can't process " +  $bagItem.getProductDesc() + ", quantity " + $bagItem.getBagItemQuantity() + " is more than the maximum allowed" ;
System.out.println(error);
$bagItem.setErrors(true);
$bagItem.setError(error);
$bagItem.logItemError(pendingItemKey($bagItem), $bagItem.getBagItem());
end

rule "Item quantity below minumum"
when 
$bagItem : DroolsBagItemWrapper(!bagItemStatus.equals("PRO01")
								&& bagItemQuantity < 1)
then 
String error = "Can't process " +  $bagItem.getProductDesc() + ", quantity " + $bagItem.getBagItemQuantity() + " is below minimum allowed" ;
System.out.println(error);
$bagItem.setErrors(true);
$bagItem.setError(error);
$bagItem.logItemError(pendingItemKey($bagItem), $bagItem.getBagItem());
end

rule "Bag quantity exceeds limit"
when  
$bagItem : DroolsBagItemWrapper(getBag().getTotalQuantity() > 50)
then 
String error = "Can't process " +  $bagItem.getProductDesc() + ", bag quantity " + $bagItem.getBagItemQuantity() + " is more than the maximum allowed" ;
$bagItem.setErrors(true);
$bagItem.setError(error);
$bagItem.logItemError(pendingItemKey($bagItem), $bagItem.getBagItem());
end

